{"version":3,"sources":["Components/List.js","Components/Items.js","Components/Main.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["List","props","state","selectOn","selectedItemId","showList","bind","updateItem","this","getEachCategory","getCategories","param","setState","id","filterList","selectedPrice","categories","className","map","val","idx","selected","parseInt","Fragment","key","onClick","a","sub_category_name","Component","Items","items","image","SpreeProductImages","length","main_image","name","src","Main","_state","_value","fetch","method","headers","Accept","Authorization","then","response","json","responseJson","result","data","rows","priceLowest","split","priceHighest","newResult","i","sell_price","push","category","tempResult","subCategory","SpreeSubCategories","j","catId","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d589ebc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Styles/List.css\";\r\n\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectOn: false, //Expand status of item filter\r\n      selectedItemId: 113, //Item ID that is selected\r\n    };\r\n    this.showList = this.showList.bind(this);\r\n    this.updateItem = this.updateItem.bind(this);\r\n  }\r\n  async componentDidMount() {\r\n    const { getEachCategory, getCategories } = this.props;\r\n    const { selectedItemId } = this.state;\r\n    getCategories();\r\n    getEachCategory(selectedItemId);\r\n  }\r\n\r\n  showList(param) {\r\n    //set the expand status of item filter\r\n    this.setState({ selectOn: param });\r\n  }\r\n\r\n  async updateItem(id) {\r\n    //update the item category\r\n    const { getEachCategory } = this.props;\r\n    await this.setState({ selectedItemId: id });\r\n    getEachCategory(id);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      filterList,\r\n      selectedPrice,\r\n      categories,\r\n      getEachCategory,\r\n    } = this.props;\r\n    const { selectOn, selectedItemId } = this.state;\r\n    return (\r\n      <div className=\"main-list\">\r\n        <div className={`filter-div ${selectOn ? \"add-size\" : \"\"}`}>\r\n          <div className=\"filter-title\">Categories:</div>\r\n          {categories.map((val, idx) => {\r\n            const selected = parseInt(val.id) === selectedItemId; //check if this item is selected\r\n            return (\r\n              <React.Fragment>\r\n                {selectOn ? (\r\n                  <div\r\n                    key={idx}\r\n                    className={`filter-item ${selected ? \"selected-item\" : \"\"}`}\r\n                    onClick={async () => {\r\n                      await this.updateItem(val.id);\r\n                      this.showList(false);\r\n                    }}\r\n                  >\r\n                    {val.sub_category_name}\r\n                  </div>\r\n                ) : (\r\n                  <React.Fragment>\r\n                    {parseInt(val.id) === selectedItemId ? (\r\n                      <div\r\n                        key={idx}\r\n                        className=\"filter-item selected-item\"\r\n                        onClick={() => this.showList(true)}\r\n                      >\r\n                        {val.sub_category_name}\r\n                      </div>\r\n                    ) : null}\r\n                  </React.Fragment>\r\n                )}\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className={`filter-div ${selectOn ? \"add-size\" : \"\"}`}>\r\n          <div className=\"filter-title\">Prices:</div>\r\n          <div\r\n            className={`filter-item ${\r\n              selectedPrice === \"0-50\" ? \"selected-item\" : \"\"\r\n            }`}\r\n            onClick={async () => {\r\n              await filterList(\"selectedPrice\", \"0-50\");\r\n              getEachCategory(selectedItemId);\r\n            }}\r\n          >\r\n            {\"0-50\"}(USD)\r\n          </div>\r\n          <div\r\n            className={`filter-item ${\r\n              selectedPrice === \"50-100\" ? \"selected-item\" : \"\"\r\n            }`}\r\n            onClick={async () => {\r\n              await filterList(\"selectedPrice\", \"50-100\");\r\n              getEachCategory(selectedItemId);\r\n            }}\r\n          >\r\n            {\"50-100\"}(USD)\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\nimport \"./Styles/Items.css\";\r\n\r\nclass Items extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.props;\r\n    return (\r\n      <div className=\"items-wrapper\">\r\n        {items.map((val, idx) => {\r\n          const image =\r\n            val.SpreeProductImages.length > 0\r\n              ? val.SpreeProductImages[0].main_image\r\n              : \"\"; //Check the item wheter it have image or not\r\n          return (\r\n            <div className=\"items-inner-div\">\r\n              <div className=\"items-title\" key={idx}>\r\n                {val.name}\r\n              </div>\r\n              <div className=\"items-image-div\">\r\n                <img\r\n                  className=\"items-image\"\r\n                  src={`https://apis.aspenku.com${image}`} //load the image\r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Items;\r\n","import React, { Component } from \"react\";\r\nimport List from \"./List\";\r\nimport Items from \"./Items\";\r\nimport \"./Styles/Main.css\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      categories: [], //list of category\r\n      selectedPrice: \"0-50\", //selected price by user\r\n      items: [], //list of items(max:20) based on category\r\n    };\r\n    this.getEachCategory = this.getEachCategory.bind(this);\r\n    this.getCategories = this.getCategories.bind(this);\r\n    this.filterList = this.filterList.bind(this);\r\n  }\r\n  async filterList(_state, _value) { //function to update state in this component from child component\r\n    await this.setState({ [_state]: _value });\r\n  }\r\n  async getEachCategory(id) { //get items based on category selected\r\n    const { selectedPrice } = this.state;\r\n    await fetch(\r\n      `https://apis.aspenku.com/api/v1/product?limit=1000&skip=0&subCategory=${id}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Basic QXNwZW5rdTpBc3Blbmt1\",\r\n        },\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then(async (responseJson) => {\r\n        const result = responseJson.data.rows;\r\n        const priceLowest = selectedPrice.split(\"-\")[0];\r\n        const priceHighest = selectedPrice.split(\"-\")[1];\r\n        let newResult = [];\r\n        for (let i = 0; i < result.length; i++) { //filter the price of the items based on selected price\r\n          if (\r\n            parseInt(result[i].sell_price) >= priceLowest &&\r\n            parseInt(result[i].sell_price) < priceHighest\r\n          )\r\n            newResult.push(result[i]);\r\n\r\n          if (newResult.length >= 20) break; //stop the search if items is already 20\r\n        }\r\n        await this.setState({ items: newResult });\r\n      });\r\n  }\r\n\r\n  async getCategories() { //get category\r\n    await fetch(`https://apis.aspenku.com/api/v1/category?subCategory=true`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Basic QXNwZW5rdTpBc3Blbmt1\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then(async (responseJson) => {\r\n        const category = responseJson.data.rows;\r\n        const tempResult = [];\r\n        for (let i = 0; i < category.length; i++) {\r\n          const subCategory = category[i].SpreeSubCategories;\r\n          for (let j = 0; j < subCategory.length; j++) { //select spesific category\r\n            const catId = subCategory[j].id;\r\n            if (\r\n              catId === 113 ||\r\n              catId === 119 ||\r\n              catId === 140 ||\r\n              catId === 141 ||\r\n              catId === 143 ||\r\n              catId === 144\r\n            ) {\r\n              tempResult.push(subCategory[j]);\r\n            }\r\n          }\r\n        }\r\n        this.setState({ categories: tempResult });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { categories, items, selectedPrice } = this.state;\r\n    return (\r\n      <div className=\"main-wrapper\">\r\n        <List\r\n          getCategories={this.getCategories}\r\n          getEachCategory={this.getEachCategory}\r\n          categories={categories}\r\n          selectedPrice={selectedPrice}\r\n          filterList={this.filterList}\r\n        />\r\n        <Items items={items} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\nimport \"./Styles/Footer.css\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer-wrapper\">\r\n        Source code:{\" \"}\r\n        <a href=\"https://github.com/potamir/aspentest\">\r\n          https://github.com/potamir/aspentest\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Main from \"./Components/Main\";\nimport Footer from \"./Components/Footer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}